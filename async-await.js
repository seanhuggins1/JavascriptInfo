/**
 * Async functions
 */

 //async keyword can be placed before a function

 async function f() {
     return 1;
 }
 //async before a function means the function ALWAYS returns a promise
 //other values are wrapped in a resolved promise automatically

 async function f() {
     return 1;
 }

f().then(alert); //1

//the same thing as explicitly returning a promise

async function f() {
    return Promise.resolve(1);
}

f().then(alert); //1

//async ensures a function returns a promise, and it wraps non-promises inside a promise


/**
 * AWAIT keyword, works inside functions
 */

 //works only inside async functions
 let value = await promise;
 //makes JS wait until the promise settles, and returns its result


 async function f() {
     let promise = new Promise((resolve, reject) => {
         setTimeout(() => resolve("done!"), 1000)
     });
     //function execution pauses
     let result = await promise; //this line WAITS until the promise resolves, before executing
     alert(result);
 }

 //await LITERALLY suspends function execution until the promise settles
 //then it resumes with a promise result
 //doesn't cost any CPU resources, because the JS engine can do other things in the meantime


 /**
  * Let's try the showAvatar() example again
  * 1. replace .then calls with await
  * we should make the function async for them to work
  */

async function showAvatar() {
    //read our JSON
    let response = await fetch('/article/promise-chaining/user.json');
    let user = await response.json();

    //read github user
    let githubResponse = await fetch(`https://api.github.com/users/${user.name}`);
    let githubUser = await githubResponse.json();

    //show the avatar
    let img = document.createElement('img');
    img.src = githubUser.avatar_url;
    img.className = "promise-avatar-example";
    document.body.append(img);

    //wait 3 seconds
    await new Promise((resolve, reject) => {
        setTimeout(resolve, 3000)
    })
    
    img.remove();

    return githubUser;
}
showAvatar();


//in the case of a rejection
async function f() {
    await Promise.reject(new Error("Whoops!"));
}

async function f() {
    throw new Error("Whoops!");
}

//in real situations, the promise may take time before it rejects

//the error can be caught using a try catch

async function f() {
    try {
        let response = await fetch('http://no-such-url');
        let user = await response.json();
    } catch(err) {
        alert(err);
    }
}

f();

//If we don't have a try...catch, the promise generated by the call to f() is rejected
//the error can still be caught by appending .catch();

async function f() {
    let response = await fetch('http://no-such-url');
}

//f() becomes a rejected promise
f().catch(alert);



//usually when we use async/await, there is no need to use .then/.catch
//since await is used as a consumer, and the function code can be surrounded in a try..catch
//since await can't be used at top level code, .then is an option if that is needed


function loadJson(url){
    return fetch(url)
        .then(response => {
            if (response.status == 200){
                return response.json();
            } else {
                throw new Error(response.status);
            }
        })
}

async function loadJson(url){
    let response = await fetch(url);
    try {
        if (response.status == 200){
            let json = await response.json();
            return json;
        }
        throw new Error(response.status);
    } catch (err) {
        alert(err);
    }
}
